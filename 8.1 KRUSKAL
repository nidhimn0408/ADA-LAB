#include <bits/stdc++.h>
using namespace std;

int findp(int n, vector<int>&par){
    if(par[n]==n) return n;
    return par[n] = findp(par[n],par);
}

void unionn (int a, int b , vector<int>&par , vector<int>&size){
    int pa=findp(a,par);
    int pb=findp(b,par);
    if(pa==pb) return;
    {
        if(size[pa]<size[pb]){
            par[pa]=pb;
            size[pb]+=size[pa];
        }
        else{
            par[pa]=pb;
            size[pb]+=size[pa];
        }
    }
}

int main() {
    cout<<"enter num of vertices and edges : ";
    int n , m; cin>>n>>m;
    priority_queue<vector<int>>pq;
    cout<<"\nenter edges : \n";
    for(int i=0;i<m;i++){
        int a,b,c; cin>>a>>b>>c;
        pq.push({-c,a,b});
    }
    
    vector<int>par(n+1,0) , size(n+1,1); 
    for(int i=0;i<=n;i++) par[i]=i;
    long long sum=0; 
    int w=0;
    vector<pair<int,int>>mst;
    
    while(!pq.empty()){
        int wt = -pq.top()[0] , u = pq.top()[1] , v = pq.top()[2];
        pq.pop();
        
        int pu = findp(u,par) , pv = findp(v,par);
        
        if(pu!=pv){
            mst.push_back({u,v});
            w++;
            unionn(pu,pv,par,size);
            sum+=wt;
        }
        
    }
    if(w!=n-1) cout<<"DISCONNECTED COMPONENTS"<<endl;
    else cout<<"minimum spanning sum is "<<sum<<endl;
    cout<<"minimum spanning tree is :\n";
    for(auto it:mst){
            cout<<it.first<<" "<<it.second<<endl;
        }
}
